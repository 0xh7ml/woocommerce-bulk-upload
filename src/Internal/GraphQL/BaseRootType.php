<?php

namespace Automattic\WooCommerce\Internal\GraphQL;

use GraphQL\Type\Definition\ObjectType;
use GraphQL\Type\Definition\ResolveInfo;

/**
 * Base class for defining the query and mutation root types for the API.
 */
abstract class BaseRootType extends ObjectType {

	/**
	 * An instance of the dependency injection container.
	 *
	 * @var \Psr\Container\ContainerInterface
	 */
	private $container;

	/**
	 * Creates a new instance of the class.
	 */
	public function __construct() {
		$this->container = wc_get_container();

		$config = array(
			'name'         => $this->get_name(),
			'description'  => $this->get_description(),
			'fields'       => $this->get_fields(),
			'resolveField' => function( $value, $args, $context, ResolveInfo $info ) {
				return $this->resolve_field( $value, $args, $context, $info );
			},
		);

		parent::__construct( $config );
	}

	/**
	 * Resolve a given query or execute a given mutation.
	 * This is done by first obtaining the instance of the type corresponding to the requested operation
	 * (by asking the dependency injection container for a class with the same name), and then
	 * executing the "resolve" or "execute" method on it.
	 *
	 * Authorization is done by checking that there's an authenticated user with read/write permissions as appropriate
	 * (read for queries, write for mutations), the same mechanism of consumer key+consumer secret from the WooCommerce
	 * REST API is used (the very same set of credentials, actually). Additionally there's a
	 * "woocommerce_graphql_check_permissions" hook that works similarly to "woocommerce_rest_check_permissions".
	 *
	 * @param mixed       $value Root value supplied to "GraphQL::executeQuery", currently unused.
	 * @param array       $args Arguments for the resolution/execution.
	 * @param mixed       $context Context object supplied to "GraphQL::executeQuery", currently unused.
	 * @param ResolveInfo $info Resolve info generated by "GraphQL::executeQuery".
	 * @return mixed Result of executing "resolve" or "execute" on the target query/mutation instance.
	 * @throws ApiException User lacks required permissions, or exception thrown by "resolve"/"execute" on the target query/mutation instance.
	 */
	private function resolve_field( $value, $args, $context, ResolveInfo $info ) {
		$user_has_permission = \WC_REST_Authentication::instance()->current_user_has_permission( $this->get_required_permission() );

		// phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase

		/**
		 * Filter to give or remove the permission to execute a given GraphQL query/mutation to the current user.
		 *
		 * @since ?
		 *
		 * @param bool Whether the user has initially the permission or not based on the existing authorization data for the user.
		 * @param string The name of the query or mutation that the user wants to execute.
		 * @param string The type of operation to perform, "read" or "write".
		 * @param array The GraphQL arguments supplied for the execution of the query or mutation.
		 * @return bool True if the user should be allowed to perform the query or mutation, false otherwise.
		 */
		$user_has_permission = apply_filters( 'woocommerce_graphql_check_permissions', $user_has_permission, $info->fieldName, $this->get_required_permission(), $args );

		if ( ! $user_has_permission ) {
			throw ApiException::Unauthorized();
		}

		$resolve_method = $this->get_resolve_method_name();
		return Main::resolve_type( $info->fieldName )->$resolve_method( $args, $context, $info );

		// phpcs:enable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
	}

	/**
	 * Get the fields for the root query/mutation.
	 * There will be one for each instance of the classes returned by "get_object_type_classes".
	 *
	 * @return array
	 */
	private function get_fields() {
		$fields      = array();
		$class_names = $this->get_object_type_classes();
		foreach ( $class_names as $class_name ) {
			$type_object                        = $this->container->get( $class_name );
			$fields[ $type_object->get_name() ] = array(
				'type'        => $type_object,
				'description' => $type_object->get_description(),
				'args'        => $type_object->get_args(),
			);
		}

		return $fields;
	}

	/**
	 * Get the name of this root query, will be either "Query" or "Mutation".
	 *
	 * @return string Name of this root query.
	 */
	abstract protected function get_name();

	/**
	 * Get the description of this root query.
	 *
	 * @return string Description of this root query.
	 */
	abstract protected function get_description();

	/**
	 * Get the required permission for the queries/mutations in this root query, will be either "read" or "write".
	 *
	 * @return string Required permission for the queries in this root query.
	 */
	abstract protected function get_required_permission();

	/**
	 * Get the method to execute when resolving a query or mutation, will be either "resolve" or "execute".
	 *
	 * @return string Method to execute when resolving a query or mutation.
	 */
	abstract protected function get_resolve_method_name();

	/**
	 * Get the full names of the classes defining the queries/mutations for this root query.
	 *
	 * @return array Full names of the classes defining the queries/mutations for this root query.
	 */
	abstract protected function get_object_type_classes();
}
