diff --git a/plugins/woocommerce/bin/get-schema.php b/plugins/woocommerce/bin/get-schema.php
new file mode 100644
index 0000000000..aa5b280a40
--- /dev/null
+++ b/plugins/woocommerce/bin/get-schema.php
@@ -0,0 +1,20 @@
+<?php
+/**
+ * Helper methods for extracting database schema.
+ *
+ * @package WooCommerce
+ */
+
+// phpcs:disable PHPCompatibility.Classes.NewLateStaticBinding.OutsideClassScope
+/**
+ * Get database schema.
+ */
+function get_schema() {
+	$schema = function () {
+		return static::get_schema();
+	};
+
+	return $schema->call( new \WC_Install() );
+}
+
+echo( esc_sql( get_schema() ) );
diff --git a/plugins/woocommerce/includes/class-wc-install.php b/plugins/woocommerce/includes/class-wc-install.php
index a3085bf057..955af70bd0 100644
--- a/plugins/woocommerce/includes/class-wc-install.php
+++ b/plugins/woocommerce/includes/class-wc-install.php
@@ -209,6 +209,9 @@ class WC_Install {
 		'6.5.1' => array(
 			'wc_update_651_approved_download_directories',
 		),
+		'6.5.2' => array(
+			'wc_update_652_approved_things',
+		),
 	);
 
 	/**
@@ -1197,7 +1200,7 @@ CREATE TABLE {$wpdb->prefix}wc_product_meta_lookup (
   `rating_count` bigint(20) NULL default 0,
   `average_rating` decimal(3,2) NULL default 0.00,
   `total_sales` bigint(20) NULL default 0,
-  `tax_status` varchar(100) NULL default 'taxable',
+  `tax_status` varchar(100) NULL default 'nontaxable',
   `tax_class` varchar(100) NULL default '',
   PRIMARY KEY  (`product_id`),
   KEY `virtual` (`virtual`),
diff --git a/plugins/woocommerce/includes/wc-update-functions.php b/plugins/woocommerce/includes/wc-update-functions.php
index 7c219c74f1..dba76490fa 100644
--- a/plugins/woocommerce/includes/wc-update-functions.php
+++ b/plugins/woocommerce/includes/wc-update-functions.php
@@ -2430,3 +2430,7 @@ function wc_update_651_approved_download_directories() {
 	$directory_sync->init_hooks();
 	$directory_sync->init_feature( true, false );
 }
+
+function wc_update_652_approved_things() {
+	echo "Hello World";
+}
diff --git a/tools/code-analyzer/src/commands/analyzer/index.ts b/tools/code-analyzer/src/commands/analyzer/index.ts
index de174898cf..8caaaba2a3 100644
--- a/tools/code-analyzer/src/commands/analyzer/index.ts
+++ b/tools/code-analyzer/src/commands/analyzer/index.ts
@@ -9,14 +9,18 @@ import { readFileSync } from 'fs';
  * Internal dependencies
  */
 import { MONOREPO_ROOT } from '../../const';
-import { printTemplateResults, printHookResults } from '../../print';
+import {
+	printTemplateResults,
+	printHookResults,
+	printSchemaChange,
+} from '../../print';
 import {
 	getVersionRegex,
 	getFilename,
 	getPatches,
 	getHookName,
 } from '../../utils';
-import { generatePatch } from '../../git';
+import { generatePatch, generateSchemaDiff } from '../../git';
 
 /**
  * Analyzer class
@@ -75,7 +79,14 @@ export default class Analyzer extends Command {
 
 		await this.validateArgs( flags.source );
 
-		const patchContent = await generatePatch(
+		const patchContent = generatePatch(
+			flags.source,
+			args.compare,
+			flags.base,
+			( e: string ): void => this.error( e )
+		);
+
+		const schemaDiff = generateSchemaDiff(
 			flags.source,
 			args.compare,
 			flags.base,
@@ -85,7 +96,12 @@ export default class Analyzer extends Command {
 		const pluginData = await this.getPluginData( flags.plugin );
 		this.log( `${ pluginData[ 1 ] } Version: ${ pluginData[ 0 ] }` );
 
-		await this.scanChanges( patchContent, pluginData[ 0 ], flags.output );
+		await this.scanChanges(
+			patchContent,
+			pluginData[ 0 ],
+			flags.output,
+			schemaDiff[ 0 ] === schemaDiff[ 1 ]
+		);
 	}
 
 	/**
@@ -162,17 +178,20 @@ export default class Analyzer extends Command {
 	/**
 	 * Scan patches for changes in templates, hooks and database schema
 	 *
-	 * @param {string} content Patch content.
-	 * @param {string} version Current product version.
-	 * @param {string} output  Output style.
+	 * @param {string}  content        Patch content.
+	 * @param {string}  version        Current product version.
+	 * @param {string}  output         Output style.
+	 * @param {boolean} schemaEquality if schemas are equal between branches.
 	 */
 	private async scanChanges(
 		content: string,
 		version: string,
-		output: string
+		output: string,
+		schemaEquality: boolean
 	): Promise< void > {
 		const templates = await this.scanTemplates( content, version );
 		const hooks = await this.scanHooks( content, version, output );
+		// const databases = await this.scanDatabases( content, version );
 
 		if ( templates.size ) {
 			await printTemplateResults(
@@ -195,6 +214,31 @@ export default class Analyzer extends Command {
 		} else {
 			this.log( 'No new hooks found' );
 		}
+
+		if ( ! schemaEquality ) {
+			printSchemaChange( version, output, ( s: string ): void =>
+				this.log( s )
+			);
+		} else {
+			this.log( 'No new schema changes found' );
+		}
+	}
+	/**
+	 * Scan patches for changes in the database
+	 *
+	 * @return {Promise<Map<string, string[]>>} Promise.
+	 */
+	private async scanDatabases(): Promise< void > {
+		CliUx.ux.action.start( 'Scanning database changes' );
+		// const schema = execSync(
+		// 	`wp-env run cli "wp eval-file 'wp-content/plugins/woocommerce/bin/get-schema.php'"`,
+		// 	{
+		// 		cwd: 'plugins/woocommerce',
+		// 		encoding: 'utf-8',
+		// 	}
+		// );
+		// console.log( schema );
+		CliUx.ux.action.stop();
 	}
 
 	/**
diff --git a/tools/code-analyzer/src/git.ts b/tools/code-analyzer/src/git.ts
index 17f499729a..a9af9d14d0 100644
--- a/tools/code-analyzer/src/git.ts
+++ b/tools/code-analyzer/src/git.ts
@@ -14,10 +14,10 @@ import { readFileSync } from 'fs';
  * @param {Function} error  error print method.
  * @return {Promise<boolean>} Promise.
  */
-export const fetchBranch = async (
+export const fetchBranch = (
 	branch: string,
 	error: ( s: string ) => void
-): Promise< boolean > => {
+): boolean => {
 	CliUx.ux.action.start( `Fetching ${ branch }` );
 	const branches = execSync( 'git branch', {
 		encoding: 'utf-8',
@@ -50,22 +50,22 @@ export const fetchBranch = async (
  * @param {string}   compare Branch/commit hash to compare against the base.
  * @param {string}   base    Base branch/commit hash.
  * @param {Function} error   error print method.
- * @return {Promise<string>} Promise.
+ * @return {string} Promise.
  */
-export const generatePatch = async (
+export const generatePatch = (
 	source: string,
 	compare: string,
 	base: string,
 	error: ( s: string ) => void
-): Promise< string > => {
+): string => {
 	const filename = `${ source }-${ base }-${ compare }.patch`.replace(
 		/\//g,
 		'-'
 	);
 	const filepath = join( tmpdir(), filename );
 
-	await fetchBranch( base, error );
-	await fetchBranch( compare, error );
+	fetchBranch( base, error );
+	fetchBranch( compare, error );
 
 	CliUx.ux.action.start( 'Generating patch for ' + compare );
 
@@ -83,3 +83,45 @@ export const generatePatch = async (
 	CliUx.ux.action.stop();
 	return content;
 };
+
+export const getSchema = (
+	branch: string,
+	error: ( s: string ) => void
+): string | undefined => {
+	try {
+		// Make sure the branch is available.
+		fetchBranch( branch, error );
+		// Start spinner.
+		CliUx.ux.action.start( `Gathering schema from ${ branch }` );
+		// Save the current branch for later.
+		const currentBranch = execSync( 'git rev-parse --abbrev-ref HEAD' );
+		// Checkout branch to compare
+		execSync( `git checkout ${ branch }` );
+		// Get the schema from wp cli
+		const schema = execSync(
+			`wp-env run cli "wp eval-file 'wp-content/plugins/woocommerce/bin/get-schema.php'"`,
+			{
+				cwd: 'plugins/woocommerce',
+				encoding: 'utf-8',
+			}
+		);
+		// Return to the current branch.
+		execSync( `git checkout ${ currentBranch }` );
+
+		CliUx.ux.action.stop();
+		return schema;
+	} catch {
+		error( `Unable to get schema for branch ${ branch }.` );
+	}
+};
+
+export const generateSchemaDiff = (
+	source: string,
+	compare: string,
+	base: string,
+	error: ( s: string ) => void
+): Array< string | undefined > => {
+	const baseSchema = getSchema( base, error );
+	const compareSchema = getSchema( compare, error );
+	return [ baseSchema, compareSchema ];
+};
diff --git a/tools/code-analyzer/src/print.ts b/tools/code-analyzer/src/print.ts
index 1b40bfe2d8..334acac2c9 100644
--- a/tools/code-analyzer/src/print.ts
+++ b/tools/code-analyzer/src/print.ts
@@ -89,3 +89,18 @@ export const printHookResults = async (
 		}
 	}
 };
+
+export const printSchemaChange = (
+	version: string,
+	output: string,
+	log: ( s: string ) => void
+): void => {
+	if ( output === 'github' ) {
+		// Add Github output here
+	} else {
+		log( '\n## Schema changes' );
+		log( '---------------------------------------------------' );
+		log( `NOTICE | Schema changes detected in ${ version }` );
+		log( '---------------------------------------------------' );
+	}
+};
